<?php

namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent_sin_codigo;
use gamboamartin\cat_sat\models\cat_sat_tipo_relacion;
use gamboamartin\errores\errores;
use PDO;
use stdClass;


class fc_relacion extends _modelo_parent_sin_codigo
{
    public function __construct(PDO $link)
    {
        $tabla = 'fc_relacion';
        $columnas = array($tabla => false, 'fc_factura' => $tabla, 'cat_sat_tipo_relacion' => $tabla);
        $campos_obligatorios = array('fc_factura_id', 'cat_sat_tipo_relacion_id');

        $columnas_extra = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas,  columnas_extra: $columnas_extra);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Facturas Relacionadas';
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        $fc_factura = (new fc_factura(link: $this->link))->registro(registro_id: $this->registro['fc_factura_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al al obtener factura', data: $fc_factura);
        }

        $cat_sat_tipo_relacion = (new cat_sat_tipo_relacion(link: $this->link))->registro(registro_id: $this->registro['cat_sat_tipo_relacion_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al al obtener cat_sat_tipo_relacion', data: $cat_sat_tipo_relacion);
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $fc_factura['fc_factura_folio'].' '.$cat_sat_tipo_relacion['cat_sat_tipo_relacion_descripcion'];
            $this->registro['descripcion'] = $descripcion;
        }
        $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta registro', data: $r_alta_bd);
        }
        return $r_alta_bd;
    }

    final public function get_relaciones(int $fc_factura_id){
        $filtro = array();
        $filtro['fc_factura.id'] = $fc_factura_id;

        $r_fc_relacion = $this->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener relacion', data: $r_fc_relacion);
        }
        $fc_relaciones = $r_fc_relacion->registros;

        $relacionados = array();
        foreach ($fc_relaciones as $fc_relacion){
            $filtro = array();
            $filtro['fc_relacion.id'] = $fc_relacion['fc_relacion_id'];
            $cat_sat_tipo_relacion_codigo = $fc_relacion['cat_sat_tipo_relacion_codigo'];
            $relacionados[$cat_sat_tipo_relacion_codigo] = array();
            $r_fc_factura_relacionada = (new fc_factura_relacionada(link: $this->link))->filtro_and(filtro: $filtro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener r_fc_factura_relacionada', data: $r_fc_factura_relacionada);
            }

            $fc_facturas_relacionadas = $r_fc_factura_relacionada->registros;
            foreach ($fc_facturas_relacionadas as $fc_factura_relacionada){
                $keys = array('fc_factura_uuid');
                $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro: $fc_factura_relacionada);
                if(errores::$error){
                    return $this->error->error(mensaje: 'Error al validar fc_factura_relacionada', data: $valida);
                }
                $relacionados[$cat_sat_tipo_relacion_codigo][] = $fc_factura_relacionada['fc_factura_uuid'];
            }

        }
        return $relacionados;

    }


}
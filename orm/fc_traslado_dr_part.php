<?php

namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent;
use gamboamartin\cat_sat\models\cat_sat_factor;
use gamboamartin\errores\errores;
use PDO;
use stdClass;


class fc_traslado_dr_part extends _modelo_parent{
    public function __construct(PDO $link)
    {
        $tabla = 'fc_traslado_dr_part';
        $columnas = array($tabla=>false,'fc_traslado_dr'=>$tabla,'fc_impuesto_dr'=>'fc_traslado_dr',
            'fc_docto_relacionado'=>'fc_impuesto_dr','fc_pago_pago'=>'fc_docto_relacionado',
            'fc_pago'=>'fc_pago_pago');
        $campos_obligatorios = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas);

        $this->NAMESPACE = __NAMESPACE__;
        $this->etiqueta = 'Traslado Dr Part';
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {

        $cat_sat_factor = (new cat_sat_factor(link: $this->link))->registro(
            registro_id: $this->registro['cat_sat_factor_id'], retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener cat_sat_factor',data:  $cat_sat_factor);
        }

        $registro = $this->init_registro_alta(registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener codigo',data:  $registro);
        }

        $this->registro = $registro;

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }

        $upd = $this->upd_fc_pago_total(cat_sat_factor: $cat_sat_factor,fc_pago_id:  $r_alta_bd->registro['fc_pago_id'],
            registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar pago_total',data:  $upd);
        }



        return $r_alta_bd;
    }

    /**
     * Integra el codigo si no existe de manera automatica
     * @param array $registro Registro en proceso de alta
     * @return array
     */
    private function codigo(array $registro): array
    {
        if(!isset($registro['codigo'])){
            $codigo = $registro['fc_traslado_dr_id'];
            $codigo .= time();
            $codigo .= mt_rand(1000,9999);
            $registro['codigo'] = $codigo;
        }
        return $registro;
    }

    private function descripcion(array $registro): array
    {
        if(!isset($registro['descripcion'])){
            $descripcion = $registro['codigo'];
            $registro['descripcion'] = $descripcion;
        }
        return $registro;

    }

    private function fc_pago_total(int $fc_pago_id){
        $filtro['fc_pago.id'] = $fc_pago_id;
        $r_pago_total = (new fc_pago_total(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener pago_total',data:  $r_pago_total);
        }
        return $r_pago_total->registros[0];
    }

    private function fc_pago_total_upd(stdClass $cat_sat_factor, array $registro): array
    {
        $fc_pago_total_upd = array();
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.0){
            $fc_pago_total_upd['total_traslados_base_iva_00'] = round($registro['base_dr'],2);
            $fc_pago_total_upd['total_traslados_impuesto_iva_00'] = round($registro['importe_dr'],2);
        }
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.08){
            $fc_pago_total_upd['total_traslados_base_iva_08'] = round($registro['base_dr'],2);
            $fc_pago_total_upd['total_traslados_impuesto_iva_08'] = round($registro['importe_dr'],2);
        }
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.16){
            $fc_pago_total_upd['total_traslados_base_iva_16'] = round($registro['base_dr'],2);
            $fc_pago_total_upd['total_traslados_impuesto_iva_16'] = round($registro['importe_dr'],2);
        }
        return $fc_pago_total_upd;
    }

    private function init_registro_alta(array $registro){
        $registro = $this->codigo(registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener codigo',data:  $registro);
        }
        $registro = $this->descripcion(registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener codigo',data:  $registro);
        }
        return $registro;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $registro_previo = $this->registro(registro_id: $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro_previo',data:  $registro_previo);
        }


        if(!isset($registro['descripcion'])){

            $codigo = $registro_previo['fc_impuesto_p_codigo'];
            if(isset($registro['codigo'])){
                $codigo = $registro['codigo'];
            }

            $descripcion = $codigo;
            $registro['descripcion'] = $descripcion;
        }
        $r_modifica_bd  = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar',data:  $r_modifica_bd);
        }
        return $r_modifica_bd;
    }

    private function upd_fc_pago_total(stdClass $cat_sat_factor, int $fc_pago_id, array $registro){
        $fc_pago_total_upd = $this->fc_pago_total_upd(cat_sat_factor: $cat_sat_factor,registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_pago_total_upd',data:  $fc_pago_total_upd);
        }

        $fc_pago_total = $this->fc_pago_total(fc_pago_id: $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_pago_total',data:  $fc_pago_total);
        }

        $upd = (new fc_pago_total(link: $this->link))->modifica_bd(registro: $fc_pago_total_upd ,
            id: $fc_pago_total['fc_pago_total_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar pago_total',data:  $upd);
        }
        return $upd;
    }

}
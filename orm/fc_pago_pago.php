<?php

namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;


class fc_pago_pago extends _modelo_parent{
    public function __construct(PDO $link)
    {
        $tabla = 'fc_pago_pago';
        $columnas = array($tabla=>false,'fc_pago'=>$tabla);
        $campos_obligatorios = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas);

        $this->NAMESPACE = __NAMESPACE__;
        $this->etiqueta = 'Pago pago';
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        if(!isset($this->registro['codigo'])){
            $codigo = $this->registro['fc_pago_id'];
            $codigo .= $this->registro['fecha_pago'];
            $codigo .= $this->registro['cat_sat_forma_pago_id'];
            $codigo .= $this->registro['cat_sat_moneda_id'];
            $codigo .= $this->registro['com_tipo_cambio_id'];
            $codigo .= $this->registro['monto'];
            $codigo .= mt_rand(1000,9999);
            $this->registro['codigo'] = $codigo;
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->registro['codigo'];
            $this->registro['descripcion'] = $descripcion;
        }
        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }

        $regenera_totales = $this->regenera_totales(fc_pago_id: $this->registro['fc_pago_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $regenera_totales);
        }

        return $r_alta_bd;
    }

    public function elimina_bd(int $id): array|stdClass
    {

        $registro_previo = $this->registro(registro_id: $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro_previo',data:  $registro_previo);
        }


        $r_elimina = parent::elimina_bd($id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar pago',data:  $r_elimina);
        }

        $regenera_totales = $this->regenera_totales(fc_pago_id: $registro_previo['fc_pago_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $regenera_totales);
        }

        return $r_elimina;

    }

    /**
     * Obtiene los totales de un pago
     * @param int $fc_pago_id Pago a verificar
     * @return array
     * @version 10.11.0
     *
     */
    private function fc_pago_totales(int $fc_pago_id): array
    {
        if($fc_pago_id <= 0){
            return $this->error->error(mensaje: 'Error fc_pago_id debe ser mayor a 0',data:  $fc_pago_id);
        }
        $filtro['fc_pago_id'] = $fc_pago_id;
        $r_fc_pago_total = (new fc_pago_total(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $r_fc_pago_total);
        }

        return $r_fc_pago_total->registros;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $registro_previo = $this->registro(registro_id: $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro_previo',data:  $registro_previo);
        }


        if(!isset($registro['descripcion'])){

            $codigo = $registro_previo['fc_pago_pago_codigo'];
            if(isset($registro['codigo'])){
                $codigo = $registro['codigo'];
            }

            $descripcion = $codigo;
            $registro['descripcion'] = $descripcion;
        }
        $r_modifica_bd  = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar',data:  $r_modifica_bd);
        }

        $registro = $this->registro(registro_id: $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro',data:  $registro);
        }

        $regenera_totales = $this->regenera_totales(fc_pago_id: $registro['fc_pago_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $regenera_totales);
        }

        return $r_modifica_bd;
    }

    private function monto_total_pagos(int $fc_pago_id){
        $filtro['fc_pago_id'] = $fc_pago_id;
        $campos['monto_total_pagos'] = 'fc_pago_pago.monto';
        $fc_pago_pago = (new fc_pago_pago(link: $this->link))->suma(campos: $campos,filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $fc_pago_pago);
        }
        return round($fc_pago_pago['monto_total_pagos'],2);
    }

    private function regenera_totales(int $fc_pago_id){
        $fc_pago_totales = $this->fc_pago_totales(fc_pago_id: $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $fc_pago_totales);
        }

        $monto_total_pagos = $this->monto_total_pagos(fc_pago_id: $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener totales',data:  $monto_total_pagos);
        }
        $fc_pago_total_upd['monto_total_pagos'] = $monto_total_pagos;
        $updates = array();
        foreach ($fc_pago_totales as $fc_pago_total){
            $r_fc_pago_total = (new fc_pago_total(link: $this->link))->modifica_bd(registro:  $fc_pago_total_upd,
                id: $fc_pago_total['fc_pago_total_id']);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al actualizar totales',data:  $r_fc_pago_total);
            }
            $updates[] = $updates;
        }
        return $updates;
    }



}
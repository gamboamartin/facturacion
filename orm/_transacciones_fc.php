<?php

namespace gamboamartin\facturacion\models;

use base\orm\modelo;
use gamboamartin\comercial\models\com_sucursal;
use gamboamartin\errores\errores;
use gamboamartin\proceso\models\pr_proceso;
use stdClass;


class _transacciones_fc extends modelo
{

    public modelo $modelo_etapa;
    protected modelo $modelo_email;

    protected string $key_fc_id = '';

    /**
     * @return array|stdClass
     */
    public function alta_bd(): array|stdClass
    {

        $keys = array('fc_csd_id');
        $valida = $this->validacion->valida_ids(keys: $keys, registro: $this->registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }

        $registro = $this->init_data_alta_bd(registro: $this->registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al inicializar registro', data: $registro);
        }

        if(!isset($registro['fecha'])){
            $registro['fecha'] = date('Y-m-d H:i:s');
        }

        $es_fecha = $this->validacion->valida_pattern(key:'fecha', txt: $registro['fecha']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar fecha', data: $es_fecha);
        }
        if($es_fecha){
            $registro['fecha'] =  $registro['fecha'].' '.date('H:i:s');
        }

        $this->registro = $registro;

        $r_alta_bd = parent::alta_bd(); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al dar de alta accion', data: $r_alta_bd);
        }

        $registro_fc = $this->registro(registro_id: $r_alta_bd->registro_id, retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener factura', data: $r_alta_bd);
        }

        $r_alta_fc_email = (new _email())->inserta_fc_emails(key_fc_id: $this->key_fc_id,
            modelo_email: $this->modelo_email, link: $this->link, registro_fc: $registro_fc);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al insertar correos', data: $r_alta_fc_email);
        }

        $r_alta_etapa = (new pr_proceso(link: $this->link))->inserta_etapa(adm_accion: __FUNCTION__, fecha: '',
            modelo: $this, modelo_etapa: $this->modelo_etapa, registro_id: $r_alta_bd->registro_id,
            valida_existencia_etapa: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar etapa', data: $r_alta_etapa);
        }


        return $r_alta_bd;
    }

    /**
     * Cancela una factura
     * @param int $cat_sat_motivo_cancelacion_id Motivo de cancelacion
     * @param modelo $modelo_cancelacion Modelo para integrar la cancelacion
     * @param int $registro_id Factura a cancelar
     * @return array|stdClass
     */
    final public function cancela_bd(int $cat_sat_motivo_cancelacion_id, modelo $modelo_cancelacion, int $registro_id): array|stdClass
    {
        $fc_cancelacion_ins[$this->key_id] = $registro_id;
        $fc_cancelacion_ins['cat_sat_motivo_cancelacion_id'] = $cat_sat_motivo_cancelacion_id;

        $r_fc_cancelacion = $modelo_cancelacion->alta_registro(registro: $fc_cancelacion_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al cancelar factura',data:  $r_fc_cancelacion);
        }

        $r_alta_factura_etapa = (new pr_proceso(link: $this->link))->inserta_etapa(adm_accion: __FUNCTION__, fecha: '',
            modelo: $this, modelo_etapa: $this->modelo_etapa, registro_id: $registro_id, valida_existencia_etapa: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar etapa', data: $r_alta_factura_etapa);
        }

        return $r_fc_cancelacion;
    }

    /**
     * Carga un descuento nuevo a un descuento previo
     * @param float $descuento Descuento previo
     * @param _partida $modelo_partida
     * @param array $partida Partida a sumar descuento
     * @return float|array
     * @version 0.117.27
     */
    private function carga_descuento(float $descuento, _partida $modelo_partida, array $partida): float|array
    {
        if ($descuento < 0.0) {
            return $this->error->error(mensaje: 'Error el descuento previo no puede ser menor a 0', data: $descuento);
        }

        $key_partida_id = $modelo_partida->key_id;

        $keys = array($key_partida_id);
        $valida = $this->validacion->valida_ids(keys: $keys, registro: $partida);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar partida', data: $valida);
        }


        $descuento_nuevo = $this->descuento_partida(modelo_partida: $modelo_partida,
            registro_partida_id: $partida[$key_partida_id]);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener descuento', data: $descuento_nuevo);
        }
        return round($descuento + $descuento_nuevo, 2);
    }

    /**
     * Obtiene y redondea un descuento de una partida
     * @param _partida $modelo_partida Modelo de la partida
     * @param int $registro_partida_id partida
     * @return float|array
     * @version 0.98.26
     */
    private function descuento_partida(_partida $modelo_partida, int $registro_partida_id): float|array
    {
        if ($registro_partida_id <= 0) {
            return $this->error->error(mensaje: 'Error registro_partida_id debe ser mayor a 0', data: $registro_partida_id);
        }
        $partida = $modelo_partida->registro(registro_id: $registro_partida_id, retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener partida', data: $partida);
        }

        $key_out = $modelo_partida->tabla.'_descuento';

        $descuento = $partida->$key_out;

        return round($descuento, 4);


    }

    /**
     * Obtiene las etapas de una factura
     * @param modelo $modelo_fc_etapa Modelo de tipo etapa
     * @param string $name_entidad Nombre de la entidad base ej fc_factura, fc_nota_credito
     * @param int $registro_id Factura o complemento a verificar etapas
     * @return array
     */
    private function etapas(modelo $modelo_fc_etapa, string $name_entidad, int $registro_id): array
    {
        $filtro[$name_entidad.'.id'] =  $registro_id;
        $r_fc_etapa = $modelo_fc_etapa->filtro_and(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener r_fc_etapa', data: $r_fc_etapa);
        }
        return $r_fc_etapa->registros;
    }

    final protected function from_impuesto(string $entidad_partida, string $tipo_impuesto): string
    {
        $key_id = $entidad_partida.'_id';
        $base = $entidad_partida.'_operacion';
        return "$entidad_partida AS $base LEFT JOIN $tipo_impuesto ON $tipo_impuesto.$key_id = $base.id";
    }

    /**
     * Inicializa los datos de un registro
     * @param array $registro
     * @return array
     */
    final protected function init_data_alta_bd(array $registro): array
    {
        $keys = array('fc_csd_id');
        $valida = $this->validacion->valida_ids(keys: $keys, registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }
        $registro_csd = (new fc_csd($this->link))->registro(registro_id: $registro['fc_csd_id'], retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener fc csd', data: $registro_csd);
        }


        $registro = $this->limpia_alta_factura(registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al limpiar keys', data: $registro);
        }


        $registro = $this->default_alta_emisor_data(registro: $registro, registro_csd: $registro_csd);

        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al limpiar keys', data: $registro);
        }

        $keys = array('com_sucursal_id');
        $valida = $this->validacion->valida_ids(keys: $keys, registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }


        if(!isset($registro['folio'])){
            $folio = $this->ultimo_folio(fc_csd_id: $registro['fc_csd_id']);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener csd', data: $folio);
            }
            $registro['folio'] = $folio;
        }

        if(!isset($registro['serie'])){
            $serie = $registro_csd->fc_csd_serie;

            $registro['serie'] = $serie;
        }

        $keys = array('serie', 'folio');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys, registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }

        $registro = $this->defaults_alta_bd(registro: $registro, registro_csd: $registro_csd);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al inicializar registro', data: $registro);
        }


        return $registro;
    }


    /**
     * Inicializa los datos del emisor para alta
     * @param array $registro Registro en proceso
     * @param stdClass $registro_csd Registro de tipo CSD
     * @return array
     */
    private function default_alta_emisor_data(array $registro, stdClass $registro_csd): array
    {
        $registro['dp_calle_pertenece_id'] = $registro_csd->dp_calle_pertenece_id;
        $registro['cat_sat_regimen_fiscal_id'] = $registro_csd->cat_sat_regimen_fiscal_id;
        return $registro;
    }

    private function defaults_alta_bd(array $registro, stdClass $registro_csd): array
    {

        $keys = array('com_sucursal_id');
        $valida = $this->validacion->valida_ids(keys: $keys, registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }

        $keys = array('serie', 'folio');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys, registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }

        $registro_com_sucursal = (new com_sucursal($this->link))->registro(
            registro_id: $registro['com_sucursal_id'], retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener sucursal', data: $registro_com_sucursal);
        }
        if (!isset($registro['codigo'])) {
            $registro['codigo'] = $registro['serie'] . ' ' . $registro['folio'];
        }
        if (!isset($registro['codigo_bis'])) {
            $registro['codigo_bis'] = $registro['serie'] . ' ' . $registro['folio'];
        }
        if (!isset($registro['descripcion'])) {
            $descripcion = $this->descripcion_select_default(registro: $registro, registro_csd: $registro_csd,
                registro_com_sucursal: $registro_com_sucursal);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error generar descripcion', data: $descripcion);
            }
            $registro['descripcion'] = $descripcion;
        }
        if (!isset($registro['descripcion_select'])) {
            $descripcion_select = $this->descripcion_select_default(registro: $registro, registro_csd: $registro_csd,
                registro_com_sucursal: $registro_com_sucursal);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error generar descripcion', data: $descripcion_select);
            }
            $registro['descripcion_select'] = $descripcion_select;
        }
        if (!isset($registro['alias'])) {
            $registro['alias'] = $registro['descripcion_select'];
        }

        $hora = date('h:i:s');
        if (isset($registro['fecha'])) {
            $registro['fecha'] = $registro['fecha'] . ' ' . $hora;
        }
        return $registro;
    }

    private function descripcion_select_default(array    $registro, stdClass $registro_csd,
                                                stdClass $registro_com_sucursal): string
    {
        $descripcion_select = $registro['folio'] . ' ';
        $descripcion_select .= $registro_csd->org_empresa_razon_social . ' ';
        $descripcion_select .= $registro_com_sucursal->com_cliente_razon_social;
        return $descripcion_select;
    }

    /**
     * Obtiene el subtotal de una factura
     * @param int $registro_id Factura o complemento de pago o NC a obtener info
     * @return float|array
     * @version 6.7.0
     */
    final public function get_factura_sub_total(int $registro_id): float|array
    {
        if ($registro_id <= 0) {
            return $this->error->error(mensaje: 'Error registro_id debe ser mayor a 0', data: $registro_id);
        }
        $key = $this->tabla.'_sub_total';
        $fc_factura = $this->registro(registro_id: $registro_id, columnas: array($key),
            retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener factura', data: $fc_factura);
        }


        return round($fc_factura->$key,2);


    }

    /**
     * Limpia los parametros de una factura
     * @param array $registro registro en proceso
     * @return array
     * @version 0.127.26
     */
    private function limpia_alta_factura(array $registro): array
    {

        $keys = array('descuento', 'subtotal', 'total', 'impuestos_trasladados', 'impuestos_retenidos');
        foreach ($keys as $key) {
            $registro = $this->limpia_si_existe(key: $key, registro: $registro);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al limpiar key', data: $registro);
            }
        }

        return $registro;
    }

    /**
     * Limpia un key de un registro si es que existe
     * @param string $key Key a limpiar
     * @param array $registro Registro para aplicacion de limpieza
     * @return array
     * @version 0.115.26
     */
    private function limpia_si_existe(string $key, array $registro): array
    {
        $key = trim($key);
        if ($key === '') {
            return $this->error->error(mensaje: 'Error key esta vacio', data: $key);
        }
        if (isset($registro[$key])) {
            unset($registro[$key]);
        }
        return $registro;
    }

    private function permite_transaccion(int $registro_id){
        $etapas = $this->etapas(modelo_fc_etapa: $this->modelo_etapa, name_entidad: $this->tabla, registro_id: $registro_id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener fc_factura_etapas', data: $etapas);
        }
        $permite_transaccion = $this->valida_permite_transaccion(etapas: $etapas);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener permite_transaccion', data: $permite_transaccion);
        }
        return $permite_transaccion;
    }

    /**
     * Suma el conjunto de partidas para descuento
     * @param _partida $modelo_partida Modelo de tipo partida
     * @param array $partidas Partidas de una factura
     * @return float|array|int
     * @version 0.118.26
     */
    private function suma_descuento_partida(_partida $modelo_partida, array $partidas): float|array|int
    {
        $descuento = 0;
        foreach ($partidas as $partida) {
            if (!is_array($partida)) {
                return $this->error->error(mensaje: 'Error partida debe ser un array', data: $partida);
            }

            $descuento_partida = $this->descuento_partida(modelo_partida: $modelo_partida,
                registro_partida_id: $partida[$modelo_partida->key_id]);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener descuento partida', data: $descuento_partida);
            }
            $descuento += $descuento_partida;
        }
        return $descuento;
    }

    private function ultimo_folio(int $fc_csd_id){
        $filtro['fc_csd.id'] = $fc_csd_id;
        $r_registro = $this->filtro_and(filtro: $filtro, limit: 1,order: array($this->tabla.'.folio'=>'DESC'));
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener r_registro', data: $r_registro);
        }


        $fc_csd = (new fc_csd(link: $this->link))->registro(registro_id: $fc_csd_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener csd', data: $fc_csd);
        }

        $fc_csd_serie = $fc_csd['fc_csd_serie'];

        $number_folio = 1;
        if((int)$r_registro->n_registros > 0){
            $fc_factura = $r_registro->registros[0];

            $fc_folio = $fc_factura[$this->tabla.'_folio'];
            $data_explode = $fc_csd_serie.'-';
            $fc_folio_explode = explode($data_explode, $fc_folio);
            if(isset($fc_folio_explode[1])){
                if(is_numeric($fc_folio_explode[1])){
                    $number_folio = (int)$fc_folio_explode[1] + 1;
                }
            }
        }

        $long_nf = strlen($number_folio);

        $n_ceros = 6;

        $i = $long_nf;
        $folio_str = '';
        while($i<$n_ceros){
            $folio_str.='0';
            $i++;
        }
        $folio_str.=$number_folio;


        return $fc_csd_serie.'-'.$folio_str;

    }

    private function valida_permite_transaccion(array $etapas): bool
    {
        $permite_transaccion = true;
        foreach ($etapas as $etapa){
            /**
             * AJUSTAR MEDIANTE CONF
             */
            if($etapa['pr_etapa_descripcion'] === 'TIMBRADO'){
                $permite_transaccion = false;
            }
        }
        return $permite_transaccion;
    }

    final public function verifica_permite_transaccion(int $registro_id){
        $permite_transaccion = $this->permite_transaccion(registro_id: $registro_id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener permite_transaccion', data: $permite_transaccion);
        }

        if(!$permite_transaccion){
            return $this->error->error(mensaje: 'Error no se permite la eliminacion', data: $permite_transaccion);
        }
        return $permite_transaccion;
    }


}

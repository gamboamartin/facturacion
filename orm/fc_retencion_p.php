<?php

namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;


class fc_retencion_p extends _modelo_parent{
    public function __construct(PDO $link)
    {
        $tabla = 'fc_retencion_p';
        $columnas = array($tabla=>false,'fc_impuesto_p'=>$tabla,'fc_pago_pago'=>'fc_impuesto_p');
        $campos_obligatorios = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas);

        $this->NAMESPACE = __NAMESPACE__;
        $this->etiqueta = 'Retencion P';
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {

        $keys = array('fc_impuesto_p_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data:  $valida);
        }

        if(!isset($this->registro['codigo'])){
            $codigo = $this->registro['fc_impuesto_p_id'];
            $codigo .= time();
            $codigo .= mt_rand(1000,9999);
            $this->registro['codigo'] = $codigo;
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->registro['codigo'];
            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }



        $filtro['fc_pago_pago.id'] = $r_alta_bd->registro['fc_pago_pago_id'];
        $campos['base_dr_sum'] = 'fc_retencion_dr_part.base_dr';
        $campos['importe_dr_sum'] = 'fc_retencion_dr_part.importe_dr';

        $fc_retencion_dr_part = (new fc_retencion_dr_part(link: $this->link))->suma(campos: $campos, filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_retencion_dr_part',data:  $fc_retencion_dr_part);
        }

        $fc_retencion_p_part_ins['fc_retencion_p_id'] = $r_alta_bd->registro_id;
        $fc_retencion_p_part_ins['base_p'] = $fc_retencion_dr_part['base_dr_sum'];
        $fc_retencion_p_part_ins['importe_p'] = $fc_retencion_dr_part['importe_dr_sum'];
        $fc_retencion_p_part_ins['cat_sat_tipo_impuesto_id'] = 2;
        $fc_retencion_p_part_ins['cat_sat_tipo_factor_id'] = 5;
        $fc_retencion_p_part_ins['cat_sat_factor_id'] = 11;

        $r_alta_fc_retencion_p_part = (new fc_retencion_p_part(link: $this->link))->alta_registro(registro: $fc_retencion_p_part_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar fc_traslado_dr_part',data:  $r_alta_fc_retencion_p_part);
        }


        return $r_alta_bd;
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $filtro['fc_retencion_p.id'] = $id;
        $del = (new fc_retencion_p_part(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar del',data:  $del);
        }
        $r_del = parent::elimina_bd($id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar del',data:  $r_del);
        }
        return $r_del;

    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false,
                                array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $registro_previo = $this->registro(registro_id: $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro_previo',data:  $registro_previo);
        }


        if(!isset($registro['descripcion'])){

            $codigo = $registro_previo['fc_traslado_p_codigo'];
            if(isset($registro['codigo'])){
                $codigo = $registro['codigo'];
            }

            $descripcion = $codigo;
            $registro['descripcion'] = $descripcion;
        }
        $r_modifica_bd  = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar',data:  $r_modifica_bd);
        }
        return $r_modifica_bd;
    }

}